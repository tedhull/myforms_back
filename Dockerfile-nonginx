# Multi-stage build for optimized Render deployment
# Stage 1: Build dependencies
FROM php:8.2-cli AS builder

# Install system dependencies (only what's needed for building)
RUN apt-get update && apt-get install -y \
    unzip \
    libzip-dev \
    libicu-dev \
    libonig-dev \
    libpq-dev \
    libxml2-dev \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install \
    pdo_pgsql \
    zip \
    intl \
    opcache \
    ctype \
    iconv \
    mbstring \
    xml

# Install Composer
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies with optimized settings
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV APP_ENV=prod
ENV APP_DEBUG=0
RUN composer install --prefer-dist --no-scripts --no-autoloader --no-dev --no-interaction --no-progress

# Copy application files
COPY . .

# Ensure cache directory is fresh and has correct permissions
RUN rm -rf var/cache && mkdir -p var/cache && chmod -R 777 var/cache

# Create .env.local with production settings
RUN echo "APP_ENV=prod" > .env.local && \
    echo "APP_DEBUG=0" >> .env.local

# Generate optimized autoloader and run post-install scripts
RUN composer dump-autoload --optimize --no-dev --classmap-authoritative && \
    composer run-script post-install-cmd --no-interaction

# Stage 2: Final image
FROM php:8.2-cli

# Install only required runtime dependencies
RUN apt-get update && apt-get install -y \
    libzip-dev \
    libicu-dev \
    libonig-dev \
    libpq-dev \
    libxml2-dev \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install \
    pdo_pgsql \
    zip \
    intl \
    opcache \
    ctype \
    iconv \
    mbstring \
    xml

# Configure opcache for production
RUN { \
    echo 'opcache.memory_consumption=128'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=4000'; \
    echo 'opcache.revalidate_freq=0'; \
    echo 'opcache.fast_shutdown=1'; \
    echo 'opcache.enable_cli=1'; \
    } > /usr/local/etc/php/conf.d/opcache-recommended.ini

# Set recommended PHP.ini settings
RUN echo "memory_limit=256M" > "$PHP_INI_DIR/conf.d/memory-limit.ini" \
    && echo "max_execution_time=600" >> "$PHP_INI_DIR/conf.d/memory-limit.ini" \
    && echo "upload_max_filesize=200M" >> "$PHP_INI_DIR/conf.d/memory-limit.ini" \
    && echo "post_max_size=200M" >> "$PHP_INI_DIR/conf.d/memory-limit.ini"

# Set working directory
WORKDIR /var/www/project

# Copy application from builder stage
COPY --from=builder /app /var/www/project

# Copy startup script
COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# Set proper permissions
RUN chown -R www-data:www-data /var/www/project

# Switch to non-root user for security
USER www-data

# Set environment to production
ENV APP_ENV=prod
ENV APP_DEBUG=0

# Expose port
EXPOSE 80

# Set entrypoint to startup script
CMD ["/usr/local/bin/start.sh"]
